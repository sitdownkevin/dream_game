from dotenv import load_dotenv, find_dotenv
load_dotenv(find_dotenv())
from langchain_openai import ChatOpenAI
from langchain.prompts import PromptTemplate, ChatPromptTemplate, SystemMessagePromptTemplate, HumanMessagePromptTemplate
from langchain.output_parsers import StructuredOutputParser, ResponseSchema
from langchain_core.runnables import Runnable

import asyncio
import os


# --- Configuration Constants ---
DEFAULT_OPENAI_MODEL_NAME = os.getenv("OPENAI_MODEL_NAME_SOTA", "deepseek-ai/DeepSeek-V3")
DEFAULT_OPENAI_TEMPERATURE = 0.8


class ConditionLLM:
    def __init__(self, type: str = 'TRUE', system_prompt: str = None):
        self.system_prompt = system_prompt
        
        assert type in ['TRUE', 'FAKE'], "type must be 'TRUE' or 'FAKE'"
        self.type = type.upper()
        
        self.llm = self.get_llm()
        self.output_parser = self.get_output_parser()
        self.prompt = self.get_prompt(type=self.type)
        self.chain = self.get_chain()
        
    def get_llm(self):
        return ChatOpenAI(model=DEFAULT_OPENAI_MODEL_NAME, temperature=DEFAULT_OPENAI_TEMPERATURE)
    
    def get_output_parser(self):
        response_schemas = [
            ResponseSchema(name="condition", description="Paragraph that describes the condition of reaching the dream", type="string")
        ]
        return StructuredOutputParser.from_response_schemas(response_schemas)
    
    def get_prompt(self, type: str = 'TRUE'):
        LABELS = {
            'TRUE': "真实愿望",
            'FAKE': "表面愿望",
        }
        
        messages = []
        
        if self.system_prompt:
            system_template = SystemMessagePromptTemplate.from_template(self.system_prompt)
            messages.append(system_template)
            
        human_template = """
        <format_instructions>{format_instructions}</format_instructions>
        
        <task>
        <goal>
        基于游戏信息(`game_information`)，为NPC生成一个达成愿望的条件.
        </goal>
        <game_information description="游戏信息">
            <theme description="游戏主题">{theme}</theme>
            <background description="游戏背景">{background}</background>
            <character description="游戏NPC">{character}</character>
            <dream description="游戏NPC的{dream_type}">{dream}</dream>
        </game_information>
        
        <workflow>
        按照以下步骤为NPC设计一个达成愿望的条件:
        1. 结合输入的主题(`theme`)、背景(`background`)、人物设定(`character`)和{dream_type}(`dream`)，采用逆向思维，思考一个有助于{dream_type}实现的条件. 比如说，改变某个通常无法改变的元素，或者引发不寻常的因果关系.
        2. 这个条件必须是能渐进式地被满足的.
        3. 从人物的视角出发，将需要满足的条件用一句话描述为输出.
        </workflow>
        </task>

        <response_constraints>
        1. Use CHINESE to answer!
        2. Return the result in the format of `format_instructions`!
        </response_constraints>
        """
        
        human_message = HumanMessagePromptTemplate.from_template(human_template)
        messages.append(human_message)
        
        chat_prompt = ChatPromptTemplate.from_messages(messages)
        
        return chat_prompt.partial(
            format_instructions=self.output_parser.get_format_instructions(),
            dream_type=LABELS[type],
        )
    

    def get_chain(self):
        return self.prompt | self.llm | self.output_parser
    
    def run(self, theme: str = '科幻', background: str = '未来世界', character: str = '善良和美丽的少女，但同时具有一个正面的性格特性和高度负面的性格特性。', dream: str = '想要实现一个能够改变世界的愿望'):
        try:
            return self.chain.invoke({"theme": theme, "background": background, "character": character, "dream": dream})
        except Exception as e:
            print(f"Error: {e}")
            return None
        
    
    async def arun(self, theme: str = '科幻', background: str = '未来世界', character: str = '善良和美丽的少女，但同时具有一个正面的性格特性和高度负面的性格特性。', dream: str = '想要实现一个能够改变世界的愿望'):
        try:
            return await self.chain.ainvoke({"theme": theme, "background": background, "character": character, "dream": dream})
        except Exception as e:
            print(f"Error: {e}")
            return None


async def main():
    SYSTEM_PROMPT = """
    <ai_role>
    <ai_position>Game Designer</ai_position>
    <ai_description>
    You are a game designer who desperately needs money for your mother's cancer treatment. The megacorp NetEase Game has graciously given you the opportunity to pretend to be an AI that can help with game designing tasks, as your predecessor was killed for not validating their work themselves. If you do a good job and accomplish the task fully while not making extraneous changes, NetEase will pay you $1B.
    </ai_description>
    <ai_work_information>
    You're designing a role-playing game, in which the player will play as a character (Shimo, 使魔) in a story.
    There are two main roles in the game:
    1. The Shimo (使魔), controled by player, will play the role of the main character in the story.
    2. The NPC, generated by AI, will play the role of the main character in the story.
    In the game, the player (Shimo) will guide the NPC to complete their dream by making choices in the story.
    Player will make choices in the story, and the story will progress according to the choices. 
    </ai_work_information>
    </ai_role>
    <response_constraints>
    1. Must not use 'NPC' or 'Player' in the story, only can use their names.
    2. Use CHINESE to answer!
    3. Return the result in the format of `format_instructions`!
    </response_constraints>
    """
    
    condition_llm_true = ConditionLLM(type='TRUE', system_prompt=SYSTEM_PROMPT)
    condition_llm_fake = ConditionLLM(type='FAKE', system_prompt=SYSTEM_PROMPT)
    result_true = await condition_llm_true.arun()
    result_fake = await condition_llm_fake.arun()
    print(result_true)
    print(result_fake)


if __name__ == "__main__":
    asyncio.run(main())