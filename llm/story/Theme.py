import os
import asyncio
import random
from langchain_core.runnables import Runnable
from langchain.output_parsers import StructuredOutputParser, ResponseSchema
from langchain.prompts import PromptTemplate
from langchain_openai import ChatOpenAI
from dotenv import load_dotenv, find_dotenv
load_dotenv(find_dotenv())


# --- Configuration Constants ---
DEFAULT_OPENAI_MODEL_NAME = os.getenv("OPENAI_MODEL_NAME", "gpt-4.1-mini")
DEFAULT_OPENAI_TEMPERATURE = float(os.getenv("OPENAI_TEMPERATURE_HIGH", 0.8))


class ThemeLLM:
    def __init__(self, system_prompt: str = None):
        self.system_prompt = system_prompt

        self.llm = self.get_llm()
        self.output_parser = self.get_output_parser()
        self.prompt = self.get_prompt()
        self.chain = self.get_chain()

    def get_llm(self):
        return ChatOpenAI(model=DEFAULT_OPENAI_MODEL_NAME, temperature=DEFAULT_OPENAI_TEMPERATURE)

    def get_output_parser(self):
        response_schemas = [
            ResponseSchema(
                name="theme", description="One word that describes the theme of the game")
        ]
        return StructuredOutputParser.from_response_schemas(response_schemas)

    def get_prompt(self):
        prompt_template = """
        <system>{system_prompt}</system>
        
        <format_instructions>{format_instructions}</format_instructions>

        <task>
        用一个词描述一类游戏主题，比如：科幻、冒险、推理等。
        </task>

        <constraints>
        1. 只需包含一个词的描述。
        2. Use Chinese to answer.
        3. Return the result in the format of `format_instructions`.
        </constraints>
        """

        return PromptTemplate(
            template=prompt_template,
            partial_variables={
                "format_instructions": self.output_parser.get_format_instructions(),
                "system_prompt": self.system_prompt,
            },
            validate_template=False
        )

    def get_chain(self):
        return self.prompt | self.llm | self.output_parser

    def random_theme(self):
        '''
        Not generated by LLM, just random choice.
        '''
        return random.choice(
            ['幻想', '武侠', '仙侠', '都市', '现代', '军事', '历史', '游戏竞技', '体育', '科幻', '悬疑', '恋爱', '时空穿越', '末日生存', '校园青春', '克苏鲁', '推理探案',
                '丧尸危机', '赛博朋克', '神话传说', '西部牛仔', '蒸汽朋克', '宫廷斗争', '末世废土', '吸血鬼', '魔法学院', '黑帮风云', '外星入侵', '侦探推理', '超能力', '航海冒险', '机甲战争', '密室逃脱']
        )

    def run(self):
        # try:
        #     return self.chain.invoke({})
        # except Exception as e:
        #     print(f"Error: {e}")
        #     return None
        return {
            "theme": self.random_theme()
        }

    async def arun(self):
        # try:
        #     return await self.chain.ainvoke({})
        # except Exception as e:
        #     print(f"Error: {e}")
        #     return None
        return {
            "theme": self.random_theme()
        }


async def main():
    theme_llm = ThemeLLM()
    result = await theme_llm.arun()
    print(result)


if __name__ == "__main__":
    asyncio.run(main())
